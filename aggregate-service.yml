server:
  shutdown: graceful
  netty:
    connection-timeout: 3s
    idle-timeout: 20s

spring:
  application:
    name: aggregate-service
  lifecycle:
    timeout-per-shutdown-phase: 30s

eureka:
  client:
    service-url:
      defaultZone: ${external.discovery-service-url}
    registry-fetch-interval-seconds: 5
    initial-instance-info-replication-interval-seconds: 5
  instance:
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 5
    prefer-ip-address: true

external:
  discovery-service-url: http://localhost:8761/eureka/
  menu-service-url: "http://menu-service"
  review-service-url: "http://review-service"
  menu-item-path: "/v1/menu-items"
  menu-reviews-path: "/v1/reviews/menu-item"
  menu-ratings-path: "/v1/reviews/ratings"
  default-timeout: 2s
  retry-backoff: 100ms
  retry-count: 5
  retry-jitter: 0.75
  zipkin-endpoint: http://localhost:9411/api/v2/spans
  loki-url: http://localhost:3100/loki/api/v1/push

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-type: time_based
        sliding-window-size: 30 # секунды
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 60 # проценты
        wait-duration-in-open-state:
          seconds: 10
        slow-call-duration-threshold:
          seconds: 4s
        # количество вызовов, по которым принимается решение открыть / закрыть circuitBreaker
        # так как мы используем тип окна TIME_BASED, это количество вызовов должно произойти за
        # указанное в параметре sliding-window-size время.
        minimum-number-of-calls: 15

    instances:
      # Определяем CircuitBreaker, который будет использоваться в MenuClient
      menuCircuitBreaker:
        base-config: default
      # Определяем CircuitBreaker, который будет использоваться в ReviewsClient
      reviewCircuitBreaker:
        base-config: default

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

api:
  get-aggregate:
    summary: Получение подробной информации о блюде по его идентификатору.
    description: |
      Предоставляет информацию о блюде, пользовательских отзывах к нему, а также рейтинге блюда.
      В случае невозможности получить информацию о рейтинге и отзывах пользователя, предоставляется
      частичный ответ с указанием на ошибку загрузки данных. 
      Список отзывов отсортирован и пагинирован согласно параметрам запроса. 
      Варианты сортировки:
      - date_asc - по дате создания от старых к новым
      - date_desc - по дате создания от новых к старым
  get-aggregate-list:
    summary: Получение списка блюд и их рейтингов из конкретной категории.
    description: |
      Предоставляет список блюд, содержащий дополнительную информацию о каждом блюде:
      - рейтинг
      - средняя оценка
      Список отсортирован согласно параметрам запроса.
      Варианты сортировки: 
      - az / za - по алфафиту
      - date_asc / date_desc - по дате создания
      - price_asc / price_desc - по цене
      - rate_asc / rate_desc - по рейтингу
  response:
    getAggregateOk: Информация о блюде успешно сформирована.
    getAggregateListOk: Список блюд успешно сформирован.
    notFound: Блюдо по указанному идентификатору не найдено.
    badRequest: Ответ не был сформирован из-за ошибки во входящих параметрах. Подробнее в сообщении об ошибке.
    serviceUnavailable: Ответ не был сформирован из-за недоступности одной из внешних систем. Подробнее в сообщении об ошибке.

management:
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    enabled: true
    sampling:
      probability: 1.0
    propagation:
      type: b3
  zipkin:
    tracing:
      endpoint: ${external.zipkin-endpoint}
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        all: true
        http.server.requests: true

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"